#!/usr/bin/env python3

# Script to merge the search index files of the main and all sub books.
# MkDocs generates JSON files with search indexes upon building a site,
# and this doesn't properly work with this project's approach of
# multiple book parts, which only get their *own* index generated
# automatically by MkDocs.
#
# This script updates the JSON index files and adds the indices of the
# other book parts, updating the relative links accordingly.
#
# The script is based on the assumption that subbooks are stored in
# direct subdirectories of the site root. To add more books it should be
# sufficient to add their path names to the BOOKS list.

import argparse
import json
import os
import sys

# Relative path to generated website, from this script
SITE_ROOT = 'site'

# Name of the book part that is the umbrella for the site
MAIN_BOOK = 'introduction'

class AbstractBook(object):
    """
    A book part (main or sub), handling the JSON file
    and the relative links to/from the other book parts.
    """
    def __init__(self, root, book_name):
        """Initialize the book object."""
        # Core properties
        self._root = root
        self._book_name = book_name
        # Path components to be set in subclasses
        self._path_from_main = ''
        self._path_from_sub = ''
        # JSON representation of all links pointing into this book part,
        # with the links modified from the main or a sibling book part.
        self._json_from_main = None
        self._json_from_sub = None
        # Path to the JSON file with search index.
        self._json_file = os.path.join(
            root,
            SITE_ROOT,
            book_name,
            'search',
            'search_index.json'
        )
        # Read original search index
        with open(self.search_index_file(), 'r') as f:
            self._original = f.read()
        # Store plain text (modified links are created from here)
        self._original_json = json.loads(self._original)
        # Original search index as generated by MkDocs
        self._original_json = None

    def json(self):
        """Return (and cache) JSON representation of search index."""
        if not self._original_json:
            self._original_json = json.loads(self._original)
        return self._original_json

    def json_docs(self, member, path):
        """
        Return (and cache) the "docs" element of the search index,
        with updated links pointing to this book from the main book
        or another subbook.
        The relative paths used for this are stored in the subclasses.
        """
        if not member:
            full_json = json.loads(
                self.replace_location(path)
            )
            member = full_json['docs']
        return member

    def json_from_main(self):
        """Return the docs with links to this from the main book."""
        return self.json_docs(self._json_from_main, self._path_from_main)

    def json_from_sub(self):
        """Return the docs with links to this from a sibling subbook."""
        return self.json_docs(self._json_from_sub, self._path_from_sub)

    def replace_location(self, path):
        """Return a copy of the original index string, with all relative
        paths updated according to the given path."""
        return self._original.replace(
            '"location":"',
            '"location":"{}'.format(path)
        )

    def search_index_file(self):
        """Return absolute path of JSON search index file."""
        return self._json_file

    def update_json(self, sub_books, main_book=None):
        """Update the JSON file with the additional indices.
        The concrete implementation is done in the subclasses."""
        self._update_json(sub_books, main_book)
        with open(self.search_index_file(), 'w') as f:
            f.write(json.dumps(self.json()))


class MainBook(AbstractBook):
    """The main book which includes the subbooks."""

    def __init__(self, root, book_name):
        super(MainBook, self).__init__(root, '')
        # Path from main to main is actually unused.
        self._path_from_main = ''
        self._path_from_sub = '../'

    def _update_json(self, sub_books, main_book=None):
        """Extend index with indexes from the main book to all subbooks."""
        docs = self.json()['docs']
        for b in sub_books:
            docs.extend(b.json_from_main())


class SubBook(AbstractBook):
    """A book part/subbook."""

    def __init__(self, root, book_name):
        super(SubBook, self).__init__(root, book_name)
        self._path_from_main = '{}/'.format(book_name)
        self._path_from_sub = '../{}/'.format(book_name)

    def _update_json(self, sub_books, main_book):
        """Extend index with indexes to the main book and the other subbooks."""
        docs = self.json()['docs']
        if main_book:
            docs.extend(main_book.json_from_sub())
        for b in sub_books:
            if not b == self:
                docs.extend(b.json_from_sub())


class Main(object):
    """A class instead of a main() function"""

    def __init__(self):
        # We assume the script is called from within the repository
        self.parse_args()
        self._main_book = None
        self._sub_books = []
        self.init_books(self.main_book_name())
        self.update_books()

    def init_books(self, main_book):
        """
        Create the book objects, load indexes from disk.
        A main book is only created if it is given, otherwise
        all book parts are siblings.
        """
        root = self.root()
        items = os.listdir(root)
        for i in items:
            subitem = os.path.join(root, i)
            if (
                os.path.isdir(subitem)
                and os.path.exists(os.path.join(subitem, 'mkdocs.yml'))
            ):
                if i == main_book:
                    self._main_book = MainBook(self.root(), i)
                else:
                    self._sub_books.append(SubBook(self.root(), i))
            else:
                pass

    def main_book_name(self):
        """
        Returns the name of the main book or '' if no main book is specified.
        """
        return self._args.main

    def parse_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            '-m',
            '--main',
            default='',
            help='Subdirectory considered to contain the main book'
        )
        parser.add_argument(
            '-b', '--built',
            choices=['yes'],
            help='Specify to indicate that the subbooks have been built'
        )
        parser.add_argument(
            '-r', '--root',
            default=os.getcwd(),
            help='Project root directory, defaults to current working directory'
        )
        self._args = args = parser.parse_args()
        if not args.built:
            sys.exit("""
CONFIGURATION ERROR:

This Script merges the search indexes of multiple MkDocs sites.
Please add the "-b/--built yes" command line option to state that
the bookparts have already been built by MkDocs.

Aborting.
            """)
        self._root = args.root #or os.getcwd()

    def root(self):
        return self._root

    def update_books(self):
        """Update the JSON indexes for all books and save to disk."""
        if self._main_book:
            self._main_book.update_json(self._sub_books)
        for b in self._sub_books:
            b.update_json(self._sub_books, self._main_book)

Main()
