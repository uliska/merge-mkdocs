#!/usr/bin/env python3

# This file is part of the merge-mkdocs project,
# https://github.com/uliska/merge-mkdocs
# https://glarean.mh-freiburg.de/git/GLAREAN-Doku/merge-mkdocs/
#
# Copyright (c) 2020 by Urs Liska
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# See http://www.gnu.org/licenses/ for more information.

"""
Handle search indexes generated by MkDocs
"""


import json
import os

from collections import OrderedDict

class SearchIndex(object):
    """
    JSON file with search index initially generated by MkDocs.
    This will be updated by appending modified indexes to
    the other books of the site.
    """

    def __init__(self, book):
        self._book = book
        self._file = os.path.join(
            book.site_root(),
            'search',
            'search_index.json'
        )
        self._original_plain = self.read_original()
        # NOTE: This is modifiable, concretely the 'docs' element
        # will be changed in-place
        self._json = json.loads(
            self._original_plain, object_pairs_hook=OrderedDict
        )

    def book(self):
        """Return a reference to the book this index belongs to."""
        return self._book

    def docs(self):
        """Return the 'docs' element of the JSON dictionary.
        This is a list with dictionaries storing a location, a title and a text.
        NOTE: This is modifiable content that will be changed during update,
        and the docs of the other books will be appended to this list, with
        updated location links.
        """
        return self.json()['docs']

    def index_file(self):
        """The absolute path of the JSON file in the generated site."""
        return self._file

    def json(self):
        """The JSON representation in its current (modified) state."""
        return self._json

    def original_docs(self):
        """
        A copy of the docs element of the *original* JSON file.
        Created upon each request.
        """
        return self.original_json()['docs']

    def original_json(self):
        """
        JSON representation of the original file (as generated by MkDocs).
        This is created upon each request from the origina text file content.
        """
        return json.loads(self.original_plain(), object_pairs_hook=OrderedDict)

    def original_plain(self):
        """The original file as plain text (single string)."""
        return self._original_plain

    def read_original(self):
        """Read the original JSON file."""
        with open(self.index_file(), 'r') as f:
            return f.read()

    def update(self, books):
        """Update the index by appending the indexes of the singling books.

        """
        docs = self.docs()
        book = self.book()
        for b in books:
            other = b.search_index()
            if other != self:
                # Add list of the indexes in `other`,
                # with locations updated as pointing
                # to the target locations from here
                docs.extend(other.updated_docs(book))

    def update_location(self, location, from_book):
        """Update a location as pointing from another book.

        This is called when producing a `docs` list with
        references from another book (from_book) into this
        book (self).
        Either of the books can be the main book or a subbook
        (it can be two subbooks or one main and one subbook).

        The purpose is to update the location link to point to
        another book (= subdirectory of the main site). MkDocs
        generates locations that are relative to a book's root
        directory. The layout of a merge-mkdocs site is to
        render the main book at the site root, and all subbooks
        in corresponding subdirectories (= subbook name).
        That means:
        - links from the main book will be prepended with <subbook>
        - links from a subbook with '../<subbook>'
        """
        from_link = (
            '' if from_book.is_main_book()
            else '../'
        )
        to_link = (
            '' if self.book().is_main_book()
            else '{}/'.format(self.book().name())
        )
        return from_link + to_link + location

    def updated_docs(self, from_book):
        """Return a new list with new doc dictionaries,
        as copies of the original docs with updated location links.
        """
        docs = self.original_docs()
        result = []
        for d in docs:
            result.append({
                'location': self.update_location(d['location'], from_book),
                'text': d['text'],
                'title': d['title']
            })
        return result

    def write(self):
        """Write the (updated) JSON to the index file."""
        with open(self.index_file(), 'w') as f:
            f.write(json.dumps(self.json()))
