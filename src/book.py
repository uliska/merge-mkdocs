# This file is part of the merge-mkdocs project,
# https://github.com/uliska/merge-mkdocs
# https://glarean.mh-freiburg.de/git/GLAREAN-Doku/merge-mkdocs/
#
# Copyright (c) 2020 by Urs Liska
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# See http://www.gnu.org/licenses/ for more information.

"""
Implement books as parts of a multi-book documentation site.
"""


import os

from subprocess import Popen

from util import (
    read_yaml,
    missing_file
)


class AbstractBook(object):
    """Represents a book.
    Books are part of a merge-mkdocs multi-book site.
    """

    def __init__(self, project, entry):

        self._project = project
        self._name = entry['name']
        self._title = entry['title']
        self._src_root = root = os.path.join(
            project.root(),
            'books',
            self._name
        )
        self._target_file = os.path.join(
            root,
            'mkdocs.yml'
        )
        self._site_root = os.path.join(
            project.root(),
            project.config('site_root'),
            self.site_segment()
        )
        config_dir = os.path.join(
            root,
            '_merge-mkdocs-config'
        )
        config_file = os.path.join(
            config_dir,
            'book-config.yml'
        )
        nav_file = os.path.join(
            config_dir,
            'navigation.yml'
        )
    # TODO:
    # https://github.com/uliska/merge-mkdocs/issues/2
        if not (
            os.path.exists(root)
            and os.path.exists(config_file)
            and os.path.exists(nav_file)
        ):
            missing_file(self._name)
        self._config = read_yaml(config_file)
        self._config['src_dir'] = self._name
        self._common = ''
    # TODO:
    # https://github.com/uliska/merge-mkdocs/issues/1
        with open(nav_file, 'r') as f:
            self._nav = f.read().split('\n')
        self._search_index = None
        self._built = False

    def build(self):
        """Call MkDocs to build the book."""
        print("Building partial book", self.name())
        print()
        p = Popen(['mkdocs', 'build'], cwd=self.src_root())
        p.wait()
        output, errors = p.communicate()
        print(output)
        if errors:
            raise Exception(errors)
        print("\n=======\n")
        self._built = True

    def common(self):
        """The common part of a mkdocs.yml file."""
        return self._common
    def config(self):
        """The configuration dictionary."""
        return self._config

    def is_main_book(self):
        """Return True if this is a main book, False for a sub book."""
        return isinstance(self, MainBook)

    def name(self):
        """The book 'name' (i.e. the path segment addressing it)"""
        return self._name

    def nav(self):
        """The navigation configuration, stored as a string list."""
    # TODO:
    # https://github.com/uliska/merge-mkdocs/issues/1
        return self._nav

    def project(self):
        """Reference to the parent project."""
        return self._project

    def search_index(self):
        """A (generated) search index.
        This is generated by MkDocs and will be updated in the process.
        The object will be created upon first request.
        """
        if not self._search_index:
            from indexes import SearchIndex
            self._search_index = SearchIndex(self)

        return self._search_index

    def set_nav(self, content):
        self._nav = '\n'.join(content)

    def site_root(self):
        """The root directory of the rendered HTML book."""
        return self._site_root

    def src_root(self):
        """The root directory of the Markdown sources."""
        return self._src_root

    def target_file(self):
        """The mkdocs.yml file where the generated configuration is stored."""
        return self._target_file

    def title(self):
        """The (visible) title of the sub book."""
        return self._title

    def update_template(self):
        """
        Update the template with actual values.
        """
        result = self.project().template()
        for item in self.project().defaults():
            result = result.replace(
                '<<<{}>>>'.format(item),
                self.config().get(item, None) or self.project().defaults(item)
            )
        result = result.rstrip('\n') + '\n'

        # Calculate the relative directory where the book will be rendered to
        result = result + "site_dir: '../../{root}{path}'\n\n".format(
            root = self.project().config('site_root'),
            path = self.site_path()
        )
        self._common = result

    def write_yaml(self):
        """Write the generated content to a file."""
        with open(self.target_file(), 'w') as f:
            f.write(self.common() + self.nav())


class MainBook(AbstractBook):
    """Represents the main book on a site."""

    def site_path(self):
        return ''

    def site_segment(self):
        return ''


class SubBook(AbstractBook):
    """Represents a sub book on a site.
    Differs from a main book only in its addressing
    scheme in the rendered site.
    """

    def site_path(self):
        return '/{}'.format(self.name())

    def site_segment(self):
        return self.name()
